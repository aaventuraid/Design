// Skema Database untuk Scale Up
// Mendukung multi-user, analytics, dan audit trails

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model User - Authentication & User Management
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String?  @unique
  passwordHash String
  role         UserRole @default(USER)
  isActive     Boolean  @default(true)
  
  // User preferences
  preferences  Json?    // Settings yang dulu disimpan di file
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastLoginAt  DateTime?
  
  // Relations
  sessions       Session[]
  processings    ImageProcessing[]
  usageRecords   UsageRecord[]
  apiKeys        ApiKey[]
  
  @@map("users")
}

enum UserRole {
  ADMIN
  USER
  PREMIUM
}

// Model Session - Authentication Sessions
model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Model ImageProcessing - History & Analytics
model ImageProcessing {
  id            String   @id @default(cuid())
  userId        String?  // Nullable untuk anonymous users
  
  // Processing details
  originalName  String
  fileSize      Int
  dimensions    Json     // {width, height}
  preset        String   // grabfood, gofood, etc.
  
  // Results
  outputFormat  String   // jpeg, png
  outputSize    Int
  processingTimeMs Int
  
  // Metadata
  userAgent     String?
  ipAddress     String?
  
  // Timestamps
  createdAt     DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("image_processings")
}

// Model UsageRecord - Rate Limiting & Analytics
model UsageRecord {
  id        String   @id @default(cuid())
  userId    String?  // Nullable untuk anonymous users
  
  // Usage tracking
  action    UsageAction
  count     Int      @default(1)
  
  // Time period (for rate limiting)
  periodStart DateTime
  periodEnd   DateTime
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("usage_records")
}

enum UsageAction {
  IMAGE_PROCESS
  COPY_GENERATE
  API_CALL
}

// Model ApiKey - API Access Management
model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  
  key       String   @unique
  name      String   // User-defined name
  isActive  Boolean  @default(true)
  
  // Permissions & Limits
  permissions Json?  // {"image_process": true, "copy_generate": true}
  rateLimit   Int?   // per hour, null = no limit
  
  // Usage tracking
  lastUsedAt  DateTime?
  usageCount  Int       @default(0)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

// Model SystemSettings - Global Configuration
model SystemSettings {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  
  // Metadata
  description String?
  category    String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("system_settings")
}

// Model AuditLog - Audit Trail
model AuditLog {
  id       String @id @default(cuid())
  
  // Who did what
  userId   String?
  action   String
  resource String
  
  // Details
  details  Json?   // What changed, additional context
  
  // Context
  ipAddress String?
  userAgent String?
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}
