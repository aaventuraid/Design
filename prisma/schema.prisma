// AI-Powered Content & Social Media Platform Database Schema
// PostgreSQL-only implementation for food delivery optimization and social media automation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model User - Authentication & User Management
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String?  @unique
  passwordHash String
  role         Role     @default(USER)
  isActive     Boolean  @default(true)
  
  // User preferences
  preferences  Json?    // Settings yang dulu disimpan di file
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastLoginAt  DateTime?
  
  // Relations
  sessions       Session[]
  processings    ImageProcessing[]
  usageRecords   UsageRecord[]
  apiKeys        ApiKey[]
  foodImages     FoodImage[]
  campaigns      Campaign[]
  socialAccounts SocialAccount[]
  
  @@map("users")
}

enum Role {
  USER
  ADMIN
  PREMIUM
}

// Model Session - Authentication Sessions
model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Model ImageProcessing - History & Analytics
model ImageProcessing {
  id            String   @id @default(cuid())
  userId        String?  // Nullable untuk anonymous users
  
  // Processing details
  originalName  String
  fileSize      Int
  dimensions    Json     // {width, height}
  preset        String   // grabfood, gofood, etc.
  
  // Results
  outputFormat  String   // jpeg, png
  outputSize    Int
  processingTimeMs Int
  
  // Metadata
  userAgent     String?
  ipAddress     String?
  
  // Timestamps
  createdAt     DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("image_processings")
}

// Model UsageRecord - Rate Limiting & Analytics
model UsageRecord {
  id        String   @id @default(cuid())
  userId    String?  // Nullable untuk anonymous users
  
  // Usage tracking
  action    UsageAction
  count     Int      @default(1)
  
  // Time period (for rate limiting)
  periodStart DateTime
  periodEnd   DateTime
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("usage_records")
}

enum UsageAction {
  IMAGE_PROCESS
  COPY_GENERATE
  API_CALL
  FOOD_OPTIMIZE
  CAMPAIGN_CREATE
  CONTENT_GENERATE
}

// Model ApiKey - API Access Management
model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  
  key       String   @unique
  name      String   // User-defined name
  isActive  Boolean  @default(true)
  
  // Permissions & Limits
  permissions Json?  // {"image_process": true, "copy_generate": true}
  rateLimit   Int?   // per hour, null = no limit
  
  // Usage tracking
  lastUsedAt  DateTime?
  usageCount  Int       @default(0)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

// Model SystemSettings - Global Configuration
model SystemSettings {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  
  // Metadata
  description String?
  category    String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("system_settings")
}

// Model SiteContent - Dynamic Content Management
model SiteContent {
  id          String @id @default(cuid())
  section     String // header, footer, homepage, etc.
  key         String // logo_url, site_title, hero_text, etc.
  value       String @db.Text
  valueType   SiteContentType @default(TEXT)
  
  // Metadata
  label       String? // Human readable label for admin
  description String? // Help text for admin
  category    String? // Group related settings
  sortOrder   Int?    // Display order in admin
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([section, key])
  @@map("site_contents")
}

enum SiteContentType {
  TEXT
  HTML
  URL
  IMAGE
  JSON
}

// Model AuditLog - Audit Trail
model AuditLog {
  id       String @id @default(cuid())
  
  // Who did what
  userId   String?
  action   String
  resource String
  
  // Details
  details  Json?   // What changed, additional context
  
  // Context
  ipAddress String?
  userAgent String?
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}

// Model FoodImage - Food Delivery Image Optimization
model FoodImage {
  id              String   @id @default(cuid())
  originalUrl     String
  optimizedUrls   Json     // Platform-specific optimized versions: {grabfood: "url", shopee: "url", gofood: "url"}
  foodCategory    String?
  aiAnalysis      Json?    // AI-generated food analysis
  optimizationLog Json     // Processing steps applied
  performanceData Json?    // Usage analytics
  
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("food_images")
}

// Model Campaign - Social Media Campaign Management
model Campaign {
  id           String            @id @default(cuid())
  name         String
  description  String?
  
  // Campaign Configuration
  seedData     Json              // Original input (image/keyword)
  strategy     Json              // AI-generated strategy
  duration     Int               // Campaign duration in days
  objective    CampaignObjective // SALES, ENGAGEMENT, MIXED
  status       CampaignStatus    // DRAFT, ACTIVE, PAUSED, COMPLETED
  
  // Targeting (PostgreSQL native arrays)
  platforms    Platform[]        // Target social media platforms
  targetAudience Json?           // Audience configuration
  
  // Relations
  contents     ScheduledContent[]
  analytics    CampaignAnalytics[]
  
  userId       String
  user         User              @relation(fields: [userId], references: [id])
  
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  startDate    DateTime?
  endDate      DateTime?
  
  @@map("campaigns")
}

// Model ScheduledContent - Individual Content Pieces
model ScheduledContent {
  id           String        @id @default(cuid())
  
  // Content Data
  title        String
  caption      String        @db.Text
  hashtags     String[]      // PostgreSQL native array
  imageUrl     String?
  videoUrl     String?
  contentType  ContentType   // POST, STORY, REEL, VIDEO
  
  // Scheduling
  platform     Platform      // TIKTOK, INSTAGRAM, FACEBOOK
  day          Int           // Day in campaign (1-30)
  scheduledAt  DateTime
  publishedAt  DateTime?
  
  // Status & Performance
  status       ContentStatus // DRAFT, SCHEDULED, PUBLISHED, FAILED
  analytics    Json?         // Platform-specific analytics
  aiGenerated  Boolean       @default(true)
  
  // Relations
  campaignId   String
  campaign     Campaign      @relation(fields: [campaignId], references: [id])
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@map("scheduled_contents")
}

// Model SocialAccount - Connected Social Media Accounts
model SocialAccount {
  id           String   @id @default(cuid())
  platform     Platform
  platformId   String   // Platform-specific user ID
  username     String
  displayName  String?
  accessToken  String   // Will be encrypted at application level
  refreshToken String?  // Will be encrypted at application level
  tokenExpires DateTime?
  isActive     Boolean  @default(true)
  
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([userId, platform])
  @@map("social_accounts")
}

// Model CampaignAnalytics - Performance Metrics
model CampaignAnalytics {
  id           String   @id @default(cuid())
  
  // Performance Metrics
  impressions  Int      @default(0)
  reach        Int      @default(0)
  likes        Int      @default(0)
  comments     Int      @default(0)
  shares       Int      @default(0)
  clicks       Int      @default(0)
  conversions  Int      @default(0)
  
  // Financial Metrics
  revenue      Decimal? @db.Decimal(10,2)
  costPerClick Decimal? @db.Decimal(10,4)
  roi          Decimal? @db.Decimal(10,4)
  
  // Time & Platform
  date         DateTime
  platform     Platform
  contentId    String?  // Reference to specific content
  
  campaignId   String
  campaign     Campaign @relation(fields: [campaignId], references: [id])
  
  createdAt    DateTime @default(now())
  
  @@unique([campaignId, platform, date])
  @@map("campaign_analytics")
}

// Enums for New Features
enum Platform {
  TIKTOK
  INSTAGRAM
  FACEBOOK
}

enum CampaignObjective {
  SALES
  ENGAGEMENT
  BRAND_AWARENESS
  MIXED
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ContentType {
  POST
  STORY
  REEL
  VIDEO
  CAROUSEL
}

enum ContentStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  CANCELLED
}
