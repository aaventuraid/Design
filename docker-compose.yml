# Docker Compose untuk Testing Database Setup
# Simulasi environment Coolify secara lokal

version: '3.8'

services:
  # PostgreSQL Database (simulasi Coolify service)
  database:
    image: postgres:15-alpine
    container_name: yuki-yaki-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-yuki_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-yuki_yaki_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U yuki_admin -d yuki_yaki_production' ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: yuki-yaki-app
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - IMAGE_BG_PROVIDER=${IMAGE_BG_PROVIDER:-internal}
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - DATA_DIR=/app/data
    ports:
      - '3000:3000'
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - app_data:/app/data
    restart: unless-stopped

  # Optional: Prisma Studio untuk database management
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: yuki-yaki-studio
    environment:
      - DATABASE_URL=${DATABASE_URL}
    command: npx prisma studio
    ports:
      - '5555:5555'
    depends_on:
      database:
        condition: service_healthy
    profiles:
      - studio

volumes:
  postgres_data:
    driver: local
  app_data:
    driver: local

networks:
  default:
    name: yuki-yaki-network
